:STARTUP: overview

* Extended and commented Emacs Configuration
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (progn
      (add-hook 'after-init-hook #'global-flycheck-mode)
      )
    )
#+END_SRC
** Project Management using Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (progn
       (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (define-key projectile-mode-map (kbd "M-n") 'projectile-find-file)
      )
    )
(projectile-mode +1)
#+END_SRC
** OrgMode Extensions
*** Org Bullets
  Display nicer looking UTF8 based Bullets instead
  of the simple Org-mode stars
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode)
)
#+END_SRC
*** Org File locations
   #+BEGIN_SRC emacs-lisp
          (custom-set-variables
           '(org-directory "~/Dropbox/deicon/20. Orgfiles")
           '(org-default-notes-file (concat org-directory "/notes.org"))
           '(org-export-html-postamble nil)
           '(org-hide-leading-stars t)
           '(org-startup-folded (quote overview))
           '(org-startup-indented t)
           )

     (global-set-key "\C-ca" 'org-agenda)

     (setq org-agenda-files (list "~/Dropbox/Deicon/20. Orgfiles/schedule.org"
                                  "~/Dropbox/Deicon/20. Orgfiles/ideas.org"))
                                  "~/Dropbox/Deicon/20. Orgfiles/links.org"))
  #+END_SRC 
*** Org Capture Templates
    Some capture Templates
    #+BEGIN_SRC emacs-lisp
            (setq org-capture-templates
                  '(
                    ("t" "TODO" entry (file+headline "~/Dropbox/Deicon/20. Orgfiles/notes.org" "Neue Todos")
                     "* TODO %?\n %i\n %a")
                    ("l" "Link" entry (file+headline "~/Dropbox/Deicon/20. Orgfiles/links.org" "Neuer Link")
                     "* %? %^L %^g \n%T" :prepend t)
                    )
                 ) 

            (global-set-key "\C-cc" 'org-capture)
    #+END_SRC
    
** Avy Search jump by charachter
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
** Which Key configuration
  Adding Feature which describes each possible 
  Key command
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (progn
      (which-key-mode)    
      ))

#+END_SRC
** Swiper and Counel Search Provider
  Simple Search Replacement allowing for regexp
  like search in all emacs buffers
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  )

(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key "\C-s" 'swiper)
       (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  ))
#+END_SRC
** Auto Complete
  For the time beeing company mode is used
  as this seems to have better support for 
  javascript and typescript as of 2019

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode)(add-hook 'after-init-hook 'global-company-mode)
  )
#+END_SRC
** WebMode configuration
   Some HTML Helper Stuff

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    )
  (setq web-mode-enable-auto-closing t)
#+END_SRC
** Helm Narrowing Framework
Massive Narrowing all over emacs
#+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :ensure t
       )
#+END_SRC
   
** Misc Key bindings
 - Show Recent open files

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-ce" 'recentf-open-files)
#+END_SRC

 - Open ibuffer instaed of buffer list

#+BEGIN_SRC emacs-lisp
   (global-set-key "\C-xb" 'ibuffer)
#+END_SRC

- Show Parentesis
  
#+BEGIN_SRC emacs-lisp

(show-paren-mode)

#+END_SRC
 
** Git MAGIT
Basically GIT interactive mode

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    )
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

#+RESULTS:

